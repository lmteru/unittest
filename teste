{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pytest\n",
    "import ipytest\n",
    "from unittest.mock import MagicMock, patch, Mock\n",
    "\n",
    "ipytest.autoconfig()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "def soma(a, b):\n",
    "    return a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m======================================= test session starts ========================================\u001b[0m\n",
      "platform linux -- Python 3.10.6, pytest-7.2.2, pluggy-1.0.0 -- /bin/python3\n",
      "cachedir: .pytest_cache\n",
      "rootdir: /home/teru/apresentacao_unittest\n",
      "\u001b[1mcollecting ... \u001b[0mcollected 6 items\n",
      "\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_soma \u001b[32mPASSED\u001b[0m\u001b[32m                                      [ 16%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_soma2 \u001b[32mPASSED\u001b[0m\u001b[32m                                     [ 33%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_soma_n[1-2-3] \u001b[32mPASSED\u001b[0m\u001b[32m                             [ 50%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_soma_n[1-1-2] \u001b[32mPASSED\u001b[0m\u001b[32m                             [ 66%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_soma_n[10-20-30] \u001b[32mPASSED\u001b[0m\u001b[32m                          [ 83%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_soma_err \u001b[32mPASSED\u001b[0m\u001b[32m                                  [100%]\u001b[0m\n",
      "\n",
      "\u001b[32m======================================== \u001b[32m\u001b[1m6 passed\u001b[0m\u001b[32m in 0.02s\u001b[0m\u001b[32m =========================================\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "%%ipytest -vv\n",
    "\n",
    "\n",
    "def test_soma():\n",
    "    assert soma(1, 1) == 2\n",
    "\n",
    "def test_soma2():\n",
    "    assert soma(1, 2) == 3\n",
    "\n",
    "@pytest.mark.parametrize('a, b, expected', [\n",
    "    (1, 2, 3),\n",
    "    (1, 1, 2),\n",
    "    (10, 20, 30)\n",
    "])\n",
    "def test_soma_n(a, b, expected):\n",
    "    assert soma(a, b) == expected\n",
    "\n",
    "def test_soma_err():\n",
    "    with pytest.raises(TypeError):\n",
    "        soma('a', 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_banco(sgbd, query: str):\n",
    "    return sgbd.get(query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m======================================= test session starts ========================================\u001b[0m\n",
      "platform linux -- Python 3.10.6, pytest-7.2.2, pluggy-1.0.0 -- /bin/python3\n",
      "cachedir: .pytest_cache\n",
      "rootdir: /home/teru/apresentacao_unittest\n",
      "\u001b[1mcollecting ... \u001b[0mcollected 3 items\n",
      "\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_get_banco \u001b[32mPASSED\u001b[0m\u001b[32m                                 [ 33%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_get_banco2[create_array] \u001b[32mPASSED\u001b[0m\u001b[32m                  [ 66%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_get_banco2[create_array_2] \u001b[32mPASSED\u001b[0m\u001b[32m                [100%]\u001b[0m\n",
      "\n",
      "\u001b[32m======================================== \u001b[32m\u001b[1m3 passed\u001b[0m\u001b[32m in 0.01s\u001b[0m\u001b[32m =========================================\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "%%ipytest -vv\n",
    "\n",
    "\n",
    "@pytest.fixture\n",
    "def create_array():\n",
    "    return [1, 2, 3]\n",
    "\n",
    "@pytest.fixture\n",
    "def create_array_2():\n",
    "    return [4, 5, 6]\n",
    "\n",
    "def test_get_banco(create_array):\n",
    "\n",
    "    sgbd_mock = MagicMock()\n",
    "\n",
    "    sgbd_mock.get.return_value = create_array\n",
    "    \n",
    "    assert get_banco(sgbd_mock, 'GET a') == create_array\n",
    "    sgbd_mock.get.assert_called_with('GET a')\n",
    "\n",
    "@pytest.mark.parametrize(\"array\", [\n",
    "    ('create_array'),\n",
    "    ('create_array_2')\n",
    "])\n",
    "def test_get_banco2(array):\n",
    "\n",
    "    sgbd_mock = MagicMock()\n",
    "\n",
    "    sgbd_mock.get.return_value = array\n",
    "    \n",
    "    assert get_banco(sgbd_mock, 'GET a') == array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "def char_remover(input:str) -> str:\n",
    "    remove = [',', '.']\n",
    "    for char in remove:\n",
    "        input = ' '.join(input).replace(char, '').split()\n",
    "\n",
    "    return ''.join(input)\n",
    "\n",
    "\n",
    "def is_polindrome(input: str) -> bool:\n",
    "    input = char_remover(input)\n",
    "\n",
    "    for i in range(math.floor(len(input)/2)):\n",
    "        print(i)\n",
    "        print(input[i], input[-1*(i+1)])\n",
    "        if not input[i] == input[-1*(i+1)]:\n",
    "            return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m======================================= test session starts ========================================\u001b[0m\n",
      "platform linux -- Python 3.10.6, pytest-7.2.2, pluggy-1.0.0 -- /bin/python3\n",
      "cachedir: .pytest_cache\n",
      "rootdir: /home/teru/apresentacao_unittest\n",
      "\u001b[1mcollecting ... \u001b[0mcollected 11 items\n",
      "\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_invert_array[abba-True] \u001b[32mPASSED\u001b[0m\u001b[32m                   [  9%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_invert_array[a,bba-True] \u001b[32mPASSED\u001b[0m\u001b[32m                  [ 18%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_invert_array[abcba-True] \u001b[32mPASSED\u001b[0m\u001b[32m                  [ 27%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_invert_array[banana-False] \u001b[32mPASSED\u001b[0m\u001b[32m                [ 36%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_invert_array[ban,ana-False] \u001b[32mPASSED\u001b[0m\u001b[32m               [ 45%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_char_remover[a,b-ab] \u001b[32mPASSED\u001b[0m\u001b[32m                      [ 54%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_char_remover[a,.b-ab] \u001b[32mPASSED\u001b[0m\u001b[32m                     [ 63%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_invert_array_mock[abba-abba-True] \u001b[32mPASSED\u001b[0m\u001b[32m         [ 72%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_invert_array_mock[ban,ana-banana-False] \u001b[32mPASSED\u001b[0m\u001b[32m   [ 81%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_div_err[a-TypeError-TypeError] \u001b[32mPASSED\u001b[0m\u001b[32m            [ 90%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_div_err[1-TypeError-Exception] \u001b[32mPASSED\u001b[0m\u001b[32m            [100%]\u001b[0m\n",
      "\n",
      "\u001b[32m======================================== \u001b[32m\u001b[1m11 passed\u001b[0m\u001b[32m in 0.04s\u001b[0m\u001b[32m ========================================\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "%%ipytest -vv\n",
    "\n",
    "@pytest.mark.parametrize('input, expected', [\n",
    "    ('abba', True),\n",
    "    ('a,bba', True),\n",
    "    ('abcba', True),\n",
    "    ('banana', False),\n",
    "    ('ban,ana', False)\n",
    "])\n",
    "def test_invert_array(input, expected):\n",
    "    assert is_polindrome(input) == expected\n",
    "\n",
    "\n",
    "@pytest.mark.parametrize('input, expected', [\n",
    "    ('a,b', 'ab'),\n",
    "    ('a,.b', 'ab')\n",
    "])\n",
    "def test_char_remover(input, expected):\n",
    "    assert char_remover(input) == expected\n",
    "\n",
    "\n",
    "@pytest.mark.parametrize('input, mock_output, expected', [\n",
    "    ('abba', 'abba', True),\n",
    "    ('ban,ana', 'banana', False)\n",
    "])\n",
    "def test_invert_array_mock(input, mock_output, expected):\n",
    "    with patch('__main__.char_remover', return_value=mock_output) as mock_method:\n",
    "        assert is_polindrome(input) == expected\n",
    "\n",
    "\n",
    "@pytest.mark.parametrize('input, mock_output, expected', [\n",
    "    ('a', TypeError, TypeError),\n",
    "    (1, TypeError, Exception)\n",
    "])\n",
    "def test_div_err(input, mock_output, expected):\n",
    "    with pytest.raises(expected):\n",
    "        with patch('__main__.char_remover', side_effect=mock_output) as mock_method:\n",
    "            assert is_polindrome(input) == expected   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "def division(a, b):\n",
    "    return a/b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m======================================= test session starts ========================================\u001b[0m\n",
      "platform linux -- Python 3.10.6, pytest-7.2.2, pluggy-1.0.0 -- /bin/python3\n",
      "cachedir: .pytest_cache\n",
      "rootdir: /home/teru/apresentacao_unittest\n",
      "\u001b[1mcollecting ... \u001b[0mcollected 4 items\n",
      "\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_div_succ[1-2-0.5] \u001b[32mPASSED\u001b[0m\u001b[32m                         [ 25%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_div_err[a-1-TypeError] \u001b[32mPASSED\u001b[0m\u001b[32m                    [ 50%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_div_err[1-0-ZeroDivisionError] \u001b[32mPASSED\u001b[0m\u001b[32m            [ 75%]\u001b[0m\n",
      "t_d88a6e3e005e4f6085d625fad3591b93.py::test_div_err[1-0-Exception] \u001b[32mPASSED\u001b[0m\u001b[32m                    [100%]\u001b[0m\n",
      "\n",
      "\u001b[32m======================================== \u001b[32m\u001b[1m4 passed\u001b[0m\u001b[32m in 0.02s\u001b[0m\u001b[32m =========================================\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "%%ipytest -vv\n",
    "\n",
    "@pytest.mark.parametrize('a, b, expected', [\n",
    "    (1, 2, 0.5)\n",
    "])\n",
    "def test_div_succ(a, b, expected):\n",
    "    assert division(a, b) == expected\n",
    "\n",
    "\n",
    "@pytest.mark.parametrize('a, b, expected', [\n",
    "    ('a', 1, TypeError),\n",
    "    (1, 0, ZeroDivisionError),\n",
    "    (1, 0, Exception)\n",
    "])\n",
    "def test_div_err(a, b, expected):\n",
    "    with pytest.raises(expected):\n",
    "        division(a, b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

